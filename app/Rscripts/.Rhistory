}
}else{
statusError=append(statusError,list(append(name,linkNest)))
}
}
assign(as.character(year),as.data.frame(as.list(map)))
write.table(as.data.frame(as.list(map)), file = paste(as.name(year),"Genres.csv",sep=''),sep=",",row.names=FALSE)
#if next year it changes the decade
if( (year+1)%%10 == 0){
assign(paste(as.character(year-9),"s",sep=''),as.data.frame(as.list(mapForDecade)))
write.table(as.data.frame(as.list(mapForDecade)), file = paste(as.name(year-9),"sGenres.csv",sep=''),sep=",",row.names=FALSE)
}
}
for(year in startYear:2010){
print(year)
map <- new.env(hash=T, parent=emptyenv())#set hashmap of genres
#at the beginning of each decade reset the map of genresForDecade
if( year%%10 == 0){
mapForDecade = new.env(hash = T,parent = emptyenv())
}
tmp<-assign(paste("artist",year,sep=''),read.csv(paste("C:/wamp/www/viz/project3/app/data/bestArtistsByYear/",year,"artist.csv",sep=''), stringsAsFactors=FALSE))
namesId = tmp[,'Artist']
#==========================for each artist find his genres
baseLinkNest<-'http://developer.echonest.com/api/v4/artist/search?api_key='
for(name in namesId){
apiKNest<-nestKeys[1]
nestKeys=append(nestKeys[-1],nestKeys[1]) # rotate keys
tmpName<-gsub(" ", "%20", name)
tmpName<- deUnicodefy(tmpName)
linkNest<-paste(baseLinkNest,apiKNest,'&format=json','&name=',tmpName,'&bucket=genre&results=1', sep = "")
jsonNest <- getURL(linkNest)
objNest <- fromJSON(jsonNest)
#print(objNest)
#if there is a response, for each genre add a a score which is
#the popularity of the artist
if(objNest$response$status$code==0){
if( length(objNest$response$artists)>0){
if(length(objNest$response$artists[[1]]$genres) > 0){
for(i in 1:length(objNest$response$artists[[1]]$genres)){
genreName<- objNest$response$artists[[1]]$genres[[i]]$name
score = tmp[tmp$Artist==name,'sum']
if(is.null(map[[genreName]])){
map[[genreName]] = score
}else{
map[[genreName]] = map[[genreName]]+score
}
as.list(map)
if(is.null(mapForDecade[[genreName]])){
mapForDecade[[genreName]]=score
}else{
mapForDecade[[genreName]] = mapForDecade[[genreName]]+score
}
}
}else{
noGenresError = append(noGenresError,list(append(name,linkNest)))
}
}else{
noArtistError = append(noArtistError,list(append(name,linkNest)))
}
}else{
statusError=append(statusError,list(append(name,linkNest)))
}
}
assign(as.character(year),as.data.frame(as.list(map)))
write.table(as.data.frame(as.list(map)), file = paste(as.name(year),"Genres.csv",sep=''),sep=",",row.names=FALSE)
#if next year it changes the decade
if( (year+1)%%10 == 0){
assign(paste(as.character(year-9),"s",sep=''),as.data.frame(as.list(mapForDecade)))
write.table(as.data.frame(as.list(mapForDecade)), file = paste(as.name(year-9),"sGenres.csv",sep=''),sep=",",row.names=FALSE)
}
}
print(as.list(map))
as.list(mapForDecade)
View(artist1997)
View(artist2000)
View(artist2001)
View(artist2002)
apiK<-apiKeys[1]
apiKeys<-append(apiKeys[-1],apiKeys[1])#rotate key
year<-y
link<-paste(baseLink,apiK, '&kimpath3=',year, sep = "")
print(year)
startYear=2000
year = 2000
print(year)
map <- new.env(hash=T, parent=emptyenv())#set hashmap of genres
#at the beginning of each decade reset the map of genresForDecade
if( year%%10 == 0){
mapForDecade = new.env(hash = T,parent = emptyenv())
}
as.list(map)
as.list(mapForDecade)
tmp<-assign(paste("artist",year,sep=''),read.csv(paste("C:/wamp/www/viz/project3/app/data/bestArtistsByYear/",year,"artist.csv",sep=''), stringsAsFactors=FALSE))
namesId = tmp[,'Artist']
baseLinkNest<-'http://developer.echonest.com/api/v4/artist/search?api_key='
for(name in namesId){
apiKNest<-nestKeys[1]
nestKeys=append(nestKeys[-1],nestKeys[1]) # rotate keys
tmpName<-gsub(" ", "%20", name)
tmpName<- deUnicodefy(tmpName)
linkNest<-paste(baseLinkNest,apiKNest,'&format=json','&name=',tmpName,'&bucket=genre&results=1', sep = "")
jsonNest <- getURL(linkNest)
objNest <- fromJSON(jsonNest)
#print(objNest)
#if there is a response, for each genre add a a score which is
#the popularity of the artist
if(objNest$response$status$code==0){
if( length(objNest$response$artists)>0){
if(length(objNest$response$artists[[1]]$genres) > 0){
for(i in 1:length(objNest$response$artists[[1]]$genres)){
genreName<- objNest$response$artists[[1]]$genres[[i]]$name
score = tmp[tmp$Artist==name,'sum']
if(is.null(map[[genreName]])){
map[[genreName]] = score
}else{
map[[genreName]] = map[[genreName]]+score
}
print(as.list(map))
if(is.null(mapForDecade[[genreName]])){
mapForDecade[[genreName]]=score
}else{
mapForDecade[[genreName]] = mapForDecade[[genreName]]+score
}
}
}else{
noGenresError = append(noGenresError,list(append(name,linkNest)))
}
}else{
noArtistError = append(noArtistError,list(append(name,linkNest)))
}
}else{
statusError=append(statusError,list(append(name,linkNest)))
}
}
mapForDecade[[genreName]]
score
unique(artist2000$Artist)
length(unique(artist2000$Artist))
nrow(artist2000)
setwd("C:/wamp/www/viz/project3/app/Rscripts")
library('RCurl')
library('rjson')
setwd("C:/wamp/www/viz/project3/app/Rscripts")
apiKeys<-c('lj2wDSnKFryhnv5MDQBaizLRGoD4b3mW',
'UAihH6xCMyX9SZnUsMMG9y3hw40hvdwI',
'aMloVVFACa6T7e1sNnhZN1au9mOAolGp',
'D2jJNdkHPa4aiXutyNhcXM0Pcdv3AknI',
'tALZxK9D0J2CUGSMpy4CvBbZK6yEyLY6')
baseLink<-'https://www.kimonolabs.com/api/ondemand/8wq6q42q?apikey='
startYear<-2000
endYear<-2014
y<-2000
apiK<-apiKeys[1]
apiKeys<-append(apiKeys[-1],apiKeys[1])#rotate key
year<-y
link<-paste(baseLink,apiK, '&kimpath3=',year, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
names <-list()
for(i in 1:obj$count){
names<-append(names,obj$results$collection1[[i]]$artist$text)
}
length(names)
unique(names)
length(unique(names))
y<-2002
apiK<-apiKeys[1]
apiKeys<-append(apiKeys[-1],apiKeys[1])#rotate key
year<-y
json <- getURL(link)
link<-paste(baseLink,apiK, '&kimpath3=',year, sep = "")
obj <- fromJSON(json)
#print(obj)
names <-list()
for(i in 1:obj$count){
names<-append(names,obj$results$collection1[[i]]$artist$text)
}
length(unique(names))
names<-unique(names)
library('RCurl')
library('rjson')
setwd("C:/wamp/www/viz/project3/app/Rscripts")
apiKeys<-c('lj2wDSnKFryhnv5MDQBaizLRGoD4b3mW',
'UAihH6xCMyX9SZnUsMMG9y3hw40hvdwI',
'aMloVVFACa6T7e1sNnhZN1au9mOAolGp',
'D2jJNdkHPa4aiXutyNhcXM0Pcdv3AknI',
'tALZxK9D0J2CUGSMpy4CvBbZK6yEyLY6')
baseLink<-'https://www.kimonolabs.com/api/ondemand/8wq6q42q?apikey='
startYear<-2000
endYear<-2014
for(y in startYear:endYear){
#=====================get the names of best artists of the year
apiK<-apiKeys[1]
apiKeys<-append(apiKeys[-1],apiKeys[1])#rotate key
year<-y
link<-paste(baseLink,apiK, '&kimpath3=',year, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
names <-list()
for(i in 1:obj$count){
names<-append(names,obj$results$collection1[[i]]$artist$text)
}
#==============remove duplicated artists
names<-unique(names)
#==============give 'em a score based on the scores of 1999
#get artists name from nameList
artists<-data.frame(t(data.frame(names)))
artists<-setNames(artists,'name')
artists<-as.data.frame(artists[artists$name!='Soundtrack',])
row.names(artists)<- 1:nrow(artists)
#get data 1999
`1999artist` <- read.csv("C:/wamp/www/viz/project3/app/data/bestArtistsByYear/1999artist.csv", stringsAsFactors=FALSE)
#trim to the size of names
scores<- as.data.frame(`1999artist`[1:nrow(artists),'sum'] )
scores<-setNames(scores,1:ncol(scores))
#combine artist and scores
combined<-cbind(artists, scores)
combined<-setNames(combined,c('Artist','sum'))
write.table(combined,paste(as.name(y),"artist.csv",sep=''),sep=',',row.names = FALSE)
}
#https://www.kimonolabs.com/api/ondemand/8wq6q42q?apiKey=lj2wDSnKFryhnv5MDQBaizLRGoD4b3mW&kimpath3=2009
library('RCurl')
library('rjson')
setwd("C:/wamp/www/viz/project3/app/Rscripts")
apiKeys<-c('lj2wDSnKFryhnv5MDQBaizLRGoD4b3mW',
'UAihH6xCMyX9SZnUsMMG9y3hw40hvdwI',
'aMloVVFACa6T7e1sNnhZN1au9mOAolGp',
'D2jJNdkHPa4aiXutyNhcXM0Pcdv3AknI',
'tALZxK9D0J2CUGSMpy4CvBbZK6yEyLY6')
baseLink<-'https://www.kimonolabs.com/api/ondemand/8wq6q42q?apikey='
startYear<-2000
endYear<-2014
for(y in startYear:endYear){
#=====================get the names of best artists of the year
apiK<-apiKeys[1]
apiKeys<-append(apiKeys[-1],apiKeys[1])#rotate key
year<-y
link<-paste(baseLink,apiK, '&kimpath3=',year, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
names <-list()
for(i in 1:obj$count){
names<-append(names,obj$results$collection1[[i]]$artist$text)
}
#==============remove duplicated artists
names<-unique(names)
#==============give 'em a score based on the scores of 1999
#get artists name from nameList
artists<-data.frame(t(data.frame(names)))
artists<-setNames(artists,'name')
artists<-as.data.frame(artists[artists$name!='Soundtrack',])
row.names(artists)<- 1:nrow(artists)
#get data 1999
`1999artist` <- read.csv("C:/wamp/www/viz/project3/app/data/artistsByYear/1999artist.csv", stringsAsFactors=FALSE)
#trim to the size of names
scores<- as.data.frame(`1999artist`[1:nrow(artists),'sum'] )
scores<-setNames(scores,1:ncol(scores))
#combine artist and scores
combined<-cbind(artists, scores)
combined<-setNames(combined,c('Artist','sum'))
write.table(combined,paste(as.name(y),"artist.csv",sep=''),sep=',',row.names = FALSE)
}
#https://www.kimonolabs.com/api/ondemand/8wq6q42q?apiKey=lj2wDSnKFryhnv5MDQBaizLRGoD4b3mW&kimpath3=2009
View(`2000`)
head(combined)
unique(combined$Artist)
length(unique(combined$Artist))
length((combined$Artist))
startYear=2000
for(year in startYear:2010){
print(year)
map <- new.env(hash=T, parent=emptyenv())#set hashmap of genres
#at the beginning of each decade reset the map of genresForDecade
if( year%%10 == 0){
mapForDecade = new.env(hash = T,parent = emptyenv())
}
tmp<-assign(paste("artist",year,sep=''),read.csv(paste("C:/wamp/www/viz/project3/app/data/bestArtistsByYear/",year,"artist.csv",sep=''), stringsAsFactors=FALSE))
namesId = tmp[,'Artist']
#==========================for each artist find his genres
baseLinkNest<-'http://developer.echonest.com/api/v4/artist/search?api_key='
for(name in namesId){
apiKNest<-nestKeys[1]
nestKeys=append(nestKeys[-1],nestKeys[1]) # rotate keys
tmpName<-gsub(" ", "%20", name)
tmpName<- deUnicodefy(tmpName)
linkNest<-paste(baseLinkNest,apiKNest,'&format=json','&name=',tmpName,'&bucket=genre&results=1', sep = "")
jsonNest <- getURL(linkNest)
objNest <- fromJSON(jsonNest)
#print(objNest)
#if there is a response, for each genre add a a score which is
#the popularity of the artist
if(objNest$response$status$code==0){
if( length(objNest$response$artists)>0){
if(length(objNest$response$artists[[1]]$genres) > 0){
for(i in 1:length(objNest$response$artists[[1]]$genres)){
genreName<- objNest$response$artists[[1]]$genres[[i]]$name
score = tmp[tmp$Artist==name,'sum']
if(is.null(map[[genreName]])){
map[[genreName]] = score
}else{
map[[genreName]] = map[[genreName]]+score
}
print(as.list(map))
if(is.null(mapForDecade[[genreName]])){
mapForDecade[[genreName]]=score
}else{
mapForDecade[[genreName]] = mapForDecade[[genreName]]+score
}
}
}else{
noGenresError = append(noGenresError,list(append(name,linkNest)))
}
}else{
noArtistError = append(noArtistError,list(append(name,linkNest)))
}
}else{
statusError=append(statusError,list(append(name,linkNest)))
}
}
assign(as.character(year),as.data.frame(as.list(map)))
write.table(as.data.frame(as.list(map)), file = paste(as.name(year),"Genres.csv",sep=''),sep=",",row.names=FALSE)
#if next year it changes the decade
if( (year+1)%%10 == 0){
assign(paste(as.character(year-9),"s",sep=''),as.data.frame(as.list(mapForDecade)))
write.table(as.data.frame(as.list(mapForDecade)), file = paste(as.name(year-9),"sGenres.csv",sep=''),sep=",",row.names=FALSE)
}
}
startYear=2000
for(year in startYear:2010){
print(year)
map <- new.env(hash=T, parent=emptyenv())#set hashmap of genres
#at the beginning of each decade reset the map of genresForDecade
if( year%%10 == 0){
mapForDecade = new.env(hash = T,parent = emptyenv())
}
tmp<-assign(paste("artist",year,sep=''),read.csv(paste("C:/wamp/www/viz/project3/app/data/artistsByYear/",year,"artist.csv",sep=''), stringsAsFactors=FALSE))
namesId = tmp[,'Artist']
#==========================for each artist find his genres
baseLinkNest<-'http://developer.echonest.com/api/v4/artist/search?api_key='
for(name in namesId){
apiKNest<-nestKeys[1]
nestKeys=append(nestKeys[-1],nestKeys[1]) # rotate keys
tmpName<-gsub(" ", "%20", name)
tmpName<- deUnicodefy(tmpName)
linkNest<-paste(baseLinkNest,apiKNest,'&format=json','&name=',tmpName,'&bucket=genre&results=1', sep = "")
jsonNest <- getURL(linkNest)
objNest <- fromJSON(jsonNest)
#print(objNest)
#if there is a response, for each genre add a a score which is
#the popularity of the artist
if(objNest$response$status$code==0){
if( length(objNest$response$artists)>0){
if(length(objNest$response$artists[[1]]$genres) > 0){
for(i in 1:length(objNest$response$artists[[1]]$genres)){
genreName<- objNest$response$artists[[1]]$genres[[i]]$name
score = tmp[tmp$Artist==name,'sum']
if(is.null(map[[genreName]])){
map[[genreName]] = score
}else{
map[[genreName]] = map[[genreName]]+score
}
print(as.list(map))
if(is.null(mapForDecade[[genreName]])){
mapForDecade[[genreName]]=score
}else{
mapForDecade[[genreName]] = mapForDecade[[genreName]]+score
}
}
}else{
noGenresError = append(noGenresError,list(append(name,linkNest)))
}
}else{
noArtistError = append(noArtistError,list(append(name,linkNest)))
}
}else{
statusError=append(statusError,list(append(name,linkNest)))
}
}
assign(as.character(year),as.data.frame(as.list(map)))
write.table(as.data.frame(as.list(map)), file = paste(as.name(year),"Genres.csv",sep=''),sep=",",row.names=FALSE)
#if next year it changes the decade
if( (year+1)%%10 == 0){
assign(paste(as.character(year-9),"s",sep=''),as.data.frame(as.list(mapForDecade)))
write.table(as.data.frame(as.list(mapForDecade)), file = paste(as.name(year-9),"sGenres.csv",sep=''),sep=",",row.names=FALSE)
}
}
startYear=2000
for(year in startYear:2010){
print(year)
map <- new.env(hash=T, parent=emptyenv())#set hashmap of genres
#at the beginning of each decade reset the map of genresForDecade
if( year%%10 == 0){
mapForDecade = new.env(hash = T,parent = emptyenv())
}
tmp<-assign(paste("artist",year,sep=''),read.csv(paste("C:/wamp/www/viz/project3/app/data/artistsByYear/",year,"artist.csv",sep=''), stringsAsFactors=FALSE))
namesId = tmp[,'Artist']
#==========================for each artist find his genres
baseLinkNest<-'http://developer.echonest.com/api/v4/artist/search?api_key='
for(name in namesId){
apiKNest<-nestKeys[1]
nestKeys=append(nestKeys[-1],nestKeys[1]) # rotate keys
tmpName<-gsub(" ", "%20", name)
tmpName<- deUnicodefy(tmpName)
linkNest<-paste(baseLinkNest,apiKNest,'&format=json','&name=',tmpName,'&bucket=genre&results=1', sep = "")
jsonNest <- getURL(linkNest)
objNest <- fromJSON(jsonNest)
#print(objNest)
#if there is a response, for each genre add a a score which is
#the popularity of the artist
if(objNest$response$status$code==0){
if( length(objNest$response$artists)>0){
if(length(objNest$response$artists[[1]]$genres) > 0){
for(i in 1:length(objNest$response$artists[[1]]$genres)){
genreName<- objNest$response$artists[[1]]$genres[[i]]$name
score = tmp[tmp$Artist==name,'sum']
if(is.null(map[[genreName]])){
map[[genreName]] = score
}else{
map[[genreName]] = map[[genreName]]+score
}
print(as.list(map))
if(is.null(mapForDecade[[genreName]])){
mapForDecade[[genreName]]=score
}else{
mapForDecade[[genreName]] = mapForDecade[[genreName]]+score
}
}
}else{
noGenresError = append(noGenresError,list(append(name,linkNest)))
}
}else{
noArtistError = append(noArtistError,list(append(name,linkNest)))
}
}else{
statusError=append(statusError,list(append(name,linkNest)))
}
}
assign(as.character(year),as.data.frame(as.list(map)))
write.table(as.data.frame(as.list(map)), file = paste(as.name(year),"Genres.csv",sep=''),sep=",",row.names=FALSE)
#if next year it changes the decade
if( (year+1)%%10 == 0){
assign(paste(as.character(year-9),"s",sep=''),as.data.frame(as.list(mapForDecade)))
write.table(as.data.frame(as.list(mapForDecade)), file = paste(as.name(year-9),"sGenres.csv",sep=''),sep=",",row.names=FALSE)
}
}
startYear=2000
for(year in startYear:2010){
print(year)
map <- new.env(hash=T, parent=emptyenv())#set hashmap of genres
#at the beginning of each decade reset the map of genresForDecade
if( year%%10 == 0){
mapForDecade = new.env(hash = T,parent = emptyenv())
}
tmp<-assign(paste("artist",year,sep=''),read.csv(paste("C:/wamp/www/viz/project3/app/data/artistsByYear/",year,"artist.csv",sep=''), stringsAsFactors=FALSE))
namesId = tmp[,'Artist']
#==========================for each artist find his genres
baseLinkNest<-'http://developer.echonest.com/api/v4/artist/search?api_key='
for(name in namesId){
apiKNest<-nestKeys[1]
nestKeys=append(nestKeys[-1],nestKeys[1]) # rotate keys
tmpName<-gsub(" ", "%20", name)
tmpName<- deUnicodefy(tmpName)
linkNest<-paste(baseLinkNest,apiKNest,'&format=json','&name=',tmpName,'&bucket=genre&results=1', sep = "")
jsonNest <- getURL(linkNest)
objNest <- fromJSON(jsonNest)
#print(objNest)
#if there is a response, for each genre add a a score which is
#the popularity of the artist
if(objNest$response$status$code==0){
if( length(objNest$response$artists)>0){
if(length(objNest$response$artists[[1]]$genres) > 0){
for(i in 1:length(objNest$response$artists[[1]]$genres)){
genreName<- objNest$response$artists[[1]]$genres[[i]]$name
score = tmp[tmp$Artist==name,'sum']
if(is.null(map[[genreName]])){
map[[genreName]] = score
}else{
map[[genreName]] = map[[genreName]]+score
}
#print(as.list(map))
if(is.null(mapForDecade[[genreName]])){
mapForDecade[[genreName]]=score
}else{
mapForDecade[[genreName]] = mapForDecade[[genreName]]+score
}
}
}else{
noGenresError = append(noGenresError,list(append(name,linkNest)))
}
}else{
noArtistError = append(noArtistError,list(append(name,linkNest)))
}
}else{
statusError=append(statusError,list(append(name,linkNest)))
}
}
assign(as.character(year),as.data.frame(as.list(map)))
write.table(as.data.frame(as.list(map)), file = paste(as.name(year),"Genres.csv",sep=''),sep=",",row.names=FALSE)
#if next year it changes the decade
if( (year+1)%%10 == 0){
assign(paste(as.character(year-9),"s",sep=''),as.data.frame(as.list(mapForDecade)))
write.table(as.data.frame(as.list(mapForDecade)), file = paste(as.name(year-9),"sGenres.csv",sep=''),sep=",",row.names=FALSE)
}
}
View(`2000s`)
sort(`2000s`)
sort(`2000s`,decreasing = FALSE)
sort(`2000s`,decreasing = TRUE)
View(artist1949)
